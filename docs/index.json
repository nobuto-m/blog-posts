[{"authors":null,"categories":null,"content":"Posting something, sometimes.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1608874061,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Posting something, sometimes.","tags":null,"title":"Nobuto Murata","type":"authors"},{"authors":[],"categories":["Miscellaneous"],"content":"I intentionally spent the holidays by keeping myself busy with some technical stuff because I knew I would regret it if nothing had been done since there was no trip planned during the period. Those were not that creative, but to follow some tutorials, for example, where I didn\u0026rsquo;t have experience with or to address some day-to-day pains.\nImmediate wins Tailscale After moving to a new place last year, I lost the ability to assign a global IP address to my router. And it became impossible to access my testbed machine from outside with direct SSH forwarded by a router. There are multiple workarounds, including setting up a VPN like OpenVPN, Wireguard, etc., with a server on the Internet as a hub in the middle, or using a reverse tunnel. But it\u0026rsquo;s still nice if I can have some sort of direct and peer-to-peer connection.\nI tried both ZeroTier and Tailscale, which offer NAT traversal with VPN. I chose Tailscale in the end for simplicity, and I like their stance trying to explain everything happening inside and related technologies.\nNot every component of it is open-source, but it\u0026rsquo;s convenient since everything is well managed. There were some other options to set up an equivalent or compatible server though.\n  Tailscale eases a headache of NAT   Not only for the remote access from my laptop on the go to the testbed machine (the arrow \u0026ldquo;A\u0026rdquo;), I enabled Tailscale for accessing my Grafana dashboard running inside a cloud instance (\u0026ldquo;B\u0026rdquo;) which is not necessary to be exposed to the Internet. I could just use SSH port forwarding or sshuttle but having a Wireguard-based connection without having a VPN endpoint exposed is like magic. As a bonus, I can reliably access a Raspberry-Pi running somewhere behind three NAT instances (\u0026ldquo;C\u0026rdquo;). I no longer have to worry about the SSH reverse tunnel for it and its retry logic I set up some time ago.\nExcalidraw As you can see above, the diagram was made with Excalidraw. It\u0026rsquo;s just amazing as turning my ugly diagram into a beautiful one. It\u0026rsquo;s getting more and more features these days. How wonderful it is.\nI\u0026rsquo;ve been using ASCIIFlow for some time since it was all text-based, which is convenient to have a diagram in Markdown text. However, I would use Excalidraw for most of the cases from now on for personal use.\nRandom stuff Setting up this blog I had some blogs so far on Blogger, Tumblr, and Medium, etc. But I wanted to have another one since Medium is getting annoying, especially when reading something on mobile. I believe this is the 5th one, and I\u0026rsquo;m using Hugo I\u0026rsquo;ve been interested in for some time and found a lovely template, Wowchemy. I published the first post in two years, and I tried to fix the template\u0026rsquo;s corner-case issues. Then the author updated those on top of my some pull requests. Outstanding customizations are:\n showing both the original published date and the modified/updated date yearly archive of the posts by defining a new taxonomy as \u0026ldquo;year\u0026rdquo;  What took time to figure out was about the snap package of Hugo. It\u0026rsquo;s currently under strict confinement, but it doesn\u0026rsquo;t work with a template like Wowchemy with Go modules. There is a request to use classic confinement, but for now, I have alias hugo=/snap/hugo/current/bin/hugo as a workaround.\nI also tried Gihub Action for Hugo to automate the builds on the Github side. In the end, I prefer building it locally since it\u0026rsquo;s just a matter of seconds. I\u0026rsquo;ve also learned that prefers-color-scheme in CSS doesn\u0026rsquo;t work with Chrome/Chromium on Linux while working with Firefox.\nThinkpad battery Previously, the charge percentage dropped suddenly from 30-40% to nearly zero. I thought the battery was broken. But it was clearly written as a known issue in the TLP documentation so it became sane after setting it back to STOP_CHARGE_THRESH_BAT0=100.\n  Wake-on-LAN I haven\u0026rsquo;t used Wake-on-LAN for some time because I relied on a smart plug to power on my testbed machine remotely. Nowadays, I\u0026rsquo;m on the same network with the machine as I have fewer chances to go out. So waking it up with a terminal command is handy without opening a mobile app. Enabling WOL wasn\u0026rsquo;t as straightforward as it sounded. Googling told me that I had to specify the MAC address of the NIC explicitly for Netplan (indirectly for systemd-networkd). I wanted to know it earlier, so I opened a pull request to add the caveat in the doc.\nSquid shutdown took time I knew my laptop was taking time to shut down due to a LXD container running squid-deb-proxy. I thought it was inevitable to flush the content on memory to the disk, but it was actually configurable. Once setting shutdown_lifetime 3 seconds, the shutdown starts almost immediately now.\nLet\u0026rsquo;s encrypt wildcard certs and DNS-01 I wanted to have a proper TLS certificate for services running behind a firewall and not exposed to the Internet. So far, I only used HTTP-01 challenges for my public web servers. Now that wildcard certs with DNS-01 is available with Let\u0026rsquo;s encrypt, I migrated the nameservers for one of my domains to Cloudflare, which is in the list of DNS-01 capable providers with certbot.\nOne caveat was that API-token based authentication wasn\u0026rsquo;t available with the version of python3-cloudflare in Ubuntu 20.04 LTS.\nhttps://certbot-dns-cloudflare.readthedocs.io/en/stable/\n Using Cloudflare Tokens also requires at least version 2.3.1 of the cloudflare python module.\n I tried to backport a newer one to 20.04, but it wasn\u0026rsquo;t straightforward. In the end, I\u0026rsquo;ve migrated from the deb based certbot to the snap one as the upstream recommends it. It\u0026rsquo;s basically with the three commands.\n$ sudo snap install certbot --classic $ sudo snap set certbot trust-plugin-with-root=ok $ sudo snap install certbot-dns-cloudflare  I knew how to redirect access of port 80 with HTTP to 443 with HTTPS. I\u0026rsquo;ve learned that I can also redirect HTTP access to port 3000 of Grafana to HTTPS with the same port with the following expression, which is neat.\nerror_page 497 =301 https://$host:$server_port$request_uri;  Grafana + Prometheus + node-exporter I don\u0026rsquo;t need to monitor my personal-use servers closely, but I set up a standard set of Prometheus and Node exporter for starters. Nothing is interesting there, but I used a Let\u0026rsquo;s encrypt cert with DNS-01 as the Grafana\u0026rsquo;s hostname is not associated with a global IP address at all.\nI have a reverse proxy using Nginx not exposed to the Internet either, but once I get certs with DNS-01, I can use HTTPS properly.\n$ sudo certbot certonly \\ -i nginx \\ --dns-cloudflare \\ --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini \\ --cert-name grafana-wildcard \\ -d '\u0026lt;DOMAIN (e.g., *.t.example.com)\u0026gt;'  $ curl -sv -o/dev/null https://grafana.t.example.com:3000/ * Trying 10.0.0.100):3000... * TCP_NODELAY set * Connected to grafana.t.example.com (10.0.0.100) port 3000 (#0) ... * Server certificate: * subject: CN=*.t.example.com * start date: Jan 5 06:24:57 2021 GMT * expire date: Apr 5 06:24:57 2021 GMT * subjectAltName: host \u0026quot;grafana.t.example.com\u0026quot; matched cert's \u0026quot;*.t.example.com\u0026quot; * issuer: C=US; O=Let's Encrypt; CN=R3 * SSL certificate verify ok. ...    Prometheus Node Exporter Full dashboard   Closing It was somehwat productive to spend the holidays in this way. I replaced Ubuntu 18.04 LTS with 20.04 LTS for the testbed machine, but didn\u0026rsquo;t have time to upgrade my laptop from 20.04 to 20.10 or discontinue one 16.04 installation of a cloud instance in favor of a new instance with 20.04 already there.\n","date":1609895342,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609895342,"objectID":"434a62e75d3df5295b97bf8b9da4ecd5","permalink":"https://nobuto-m.github.io/post/2021/how-i-spent-year-end-holidays/","publishdate":"2021-01-06T10:09:02+09:00","relpermalink":"/post/2021/how-i-spent-year-end-holidays/","section":"post","summary":"I intentionally spent the holidays by keeping myself busy with some technical stuff because I knew I would regret it if nothing had been done since there was no trip planned during the period.","tags":[],"title":"How I spent year-end holidays","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"   A custom and global shortcut key to mute / unmute yourself in Zoom or Google Meet   Just like everyone else, 2020 was the year of having more and more video-conference calls. How many times did we struggle to find the meeting window during a call, and say \u0026ldquo;Sorry, I was on mute\u0026rdquo;? I tried to address the pain and ended up with the following setup.\nxdotool xdotool is a great automation tool for X, and it can search a window, activate it, and simulate keyboard input. That\u0026rsquo;s a perfect match for the use case here.\nHere is an example command for Google Meet.\n$ xdotool search --name '^Meet - .+ - Chromium$' \\ windowactivate --sync \\ key ctrl+d  In the chained commands, it does:\n search windows named like Meet - \u0026lt;MEETING_ID\u0026gt; - Chromium activate the first window passed by the previous line and wait until it gets active (--sync) send a keystroke as Ctrl+D, which is the default shortcut in Meet  By the way, my main browser is Firefox, but I have to use Chromium to join Meet calls since it tends to have less CPU utilization.\nYou can do something similar for Zoom with Alt+A.\n$ xdotool search --name '^Zoom Meeting$' \\ windowactivate --sync \\ key alt+a  Microsoft Teams should work with xdotool and Ctrl+Shift+M at least for the web version.\nGNOME keyboard shortcuts The commands above can be mapped to a shortcut key with GNOME.\n  It\u0026rsquo;s pretty simple, but some tricks may be required. As far as I see, gsd-media-keys will invoke a command when a shortcut key is pressed, not released. In my case, I use Ctrl+space as the shortcut key, so Meet may recognize keys pressed as Ctrl+space + Ctrl+D = Ctrl+space+D which doesn\u0026rsquo;t trigger the mute/unmute behavior actually. Keys can be canceled with keyup, so the key command was turned into keyup space key ctrl+d in the end.\nAlso, I wanted to use the same shortcut key for multiple services, and I have the following line which tries Google Meet first, then Zoom if no Meet window is found. It should work most of the cases unless you join multiple meetings at the same time.\nsh -c \u0026quot; xdotool search --name '^Meet - .+ - Chromium$' windowactivate --sync keyup space key ctrl+d || xdotool search --name '^Zoom Meeting$' windowactivate --sync keyup ctrl+space key alt+a \u0026quot;  --clearmodifiers can be used to simplify the whole commands, but when I tried, it sometimes left the Ctrl key pressed depending on the timing I released the key.\nHardware mute/unmute button Going further, I wanted to have a dedicated button to mute/unmute myself especially for some relaxed meetings where I don\u0026rsquo;t have to keep my hands on the keyboard all the time.\nBack in October, I bought a USB volume controller, which is recognized as \u0026ldquo;STMicroelectronics USB Volume Control\u0026rdquo; from the OS. It was around 15 USD.\n  It emits expected events as KEY_VOLUMEUP and KEY_VOLUMEDOWN with the dial, and KEY_MUTE when the knob is pressed.\nI created a \u0026ldquo;hwdb\u0026rdquo; file to remap the mute key to something else as follows in /etc/udev/hwdb.d/99-local-remap-usb-volume-control.hwdb.\n# STMicroelectronics USB Volume Control # Remap the click (Mute) to XF86Launch evdev:input:b0003v0483p572D* KEYBOARD_KEY_c00e2=prog4  Once the hardware database is updated with systemd-hwdb update and the device is unplugged and plugged again (if without udevadm commands), I was able to map Launch4(prog4) to the xdotool commands in GNOME successfully.\nIt looks like everyone had the same idea. There are fancier buttons out there :-)\nNever going to fumble for the mute button on a google meet again. Plus bonus pac man feels. @sparkfun pic.twitter.com/2oG7U2EcoR\n\u0026mdash; joe (@joemcmanus) December 23, 2020  ","date":1609354193,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609354193,"objectID":"b3456bd7371184b53578e836effa3a9c","permalink":"https://nobuto-m.github.io/post/2020/shortcut-key-to-mute-unmute-yourself-in-zoom-or-google-meet/","publishdate":"2020-12-31T03:49:53+09:00","relpermalink":"/post/2020/shortcut-key-to-mute-unmute-yourself-in-zoom-or-google-meet/","section":"post","summary":"A custom and global shortcut key to mute / unmute yourself in Zoom or Google Meet   Just like everyone else, 2020 was the year of having more and more video-conference calls.","tags":["planet-ubuntu"],"title":"Shortcut key to mute/unmute yourself in Zoom or Google Meet","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"    EDIT: I have migrated one of my domains to Google Domains so I\u0026rsquo;m using protocol=googledomains these days.   When I searched for a way to configure ddclient for No-IP.com, some pages mention protocol=dyndns2 with a custom URL. But actually, ddclient supports protocol=noip out of the box, so minimal steps would be something like:\n$ sudo apt install ddclient $ cat \u0026lt;\u0026lt;EOF | sudo tee /etc/ddclient.conf use=web ssl=yes protocol=noip login=\u0026lt;USERNAME\u0026gt; password=\u0026lt;PASSWORD\u0026gt; \u0026lt;YOUR_HOSTNAME\u0026gt; EOF  And here we go.\n$ echo 'run_daemon=\u0026quot;true\u0026quot;' | sudo tee -a /etc/default/ddclient $ sudo service ddclient restart $ journalctl -u ddclient.service ... systemd[1]: Started LSB: Update dynamic domain name service entries. ddclient[24631]: SUCCESS: updating MY_HOST.redirectme.net: good: IP address set to 118.X.Y.Z  For more details, please refer to ddclient -help.\n This post was originally published at https://medium.com/@nobuto_m/minimal-dynamic-dns-configuration-for-no-ip-com-with-ddclient-cb7c038a74be\n ","date":1532098800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560783600,"objectID":"00f6ce3e4623d47f017231f47adc1b7f","permalink":"https://nobuto-m.github.io/post/2018/minimal-dynamic-dns-configuration-for-no-ip.com-with-ddclient/","publishdate":"2018-07-21T00:00:00+09:00","relpermalink":"/post/2018/minimal-dynamic-dns-configuration-for-no-ip.com-with-ddclient/","section":"post","summary":"EDIT: I have migrated one of my domains to Google Domains so I\u0026rsquo;m using protocol=googledomains these days.   When I searched for a way to configure ddclient for No-IP.","tags":["planet-ubuntu"],"title":"Minimal Dynamic DNS configuration for No-IP.com with ddclient","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"With Livepatch support in Linux kernel and Livepatch service for Ubuntu, reboots are no longer necessary even when kernel vulnerabilities are found. You can avoid and postpone unplanned reboots to whenever convenient for you, such as scheduled maintenance windows (Well, there are some corner cases which still require reboots though).\nWhat about services? After applying security updates of libraries, some services still grab old libraries which may have vulnerabilities. You can list up those processes with “lsof”.\n$ sudo lsof / | egrep -w 'DEL|deleted' ... apache2 2296 root DEL REG 252,0 260616 /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 apache2 2296 root DEL REG 252,0 260711 /lib/x86_64-linux-gnu/libssl.so.1.0.0 apache2 2299 www-data DEL REG 252,0 260616 /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 apache2 2299 www-data DEL REG 252,0 260711 /lib/x86_64-linux-gnu/libssl.so.1.0.0 ...  With “lsof”, you have to determine which process belongs to which systemd unit and manually restart those units. There is a helper script called “needrestart”. It is inspired by checkrestart from the debian-goodies package according to their doc. It shows a handy dialogue at the end of apt upgrade and prompts service restarts.\n  To use “needrestart”, you just need to install a package with the same name.\n$ sudo apt install needrestart  You can also change the default behavior by editing /etc/needrestart/needrestart.conf. For example, you can enable automatic restart without asking.\n# Restart services (l)ist only, (i)nteractive or (a)utomatically. #$nrconf{restart} = 'i';  Furthermore, it has “nagios” plugin mode(-p) so that it can be integrated with monitoring systems. With this mode, you might want to skip an obsolete kernel check by adding -l flag if kernel patching is managed by Livepatch.\n$ sudo needrestart -p -l CRIT — Services: 4 (!), Containers: none, Sessions: 1 (!)|Services=4;;0;0 Containers=0;;0;0 Sessions=1;0;;0  Here is an example of Nagios status output.\n   This post was originally published at https://medium.com/@nobuto_m/knowing-what-services-need-restart-with-needrestart-37419f44ed46\n ","date":1499094000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1499094000,"objectID":"94efc66abdbea2e1248661b51065423f","permalink":"https://nobuto-m.github.io/post/2017/knowing-what-services-need-restart-with-needrestart/","publishdate":"2017-07-04T00:00:00+09:00","relpermalink":"/post/2017/knowing-what-services-need-restart-with-needrestart/","section":"post","summary":"With Livepatch support in Linux kernel and Livepatch service for Ubuntu, reboots are no longer necessary even when kernel vulnerabilities are found. You can avoid and postpone unplanned reboots to whenever convenient for you, such as scheduled maintenance windows (Well, there are some corner cases which still require reboots though).","tags":["planet-ubuntu"],"title":"Knowing what services need restart with “needrestart”","type":"post"}]